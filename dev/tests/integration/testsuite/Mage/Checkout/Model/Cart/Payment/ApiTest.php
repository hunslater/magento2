<?php
/**
 * Cart payment methods API tests.
 *
 * Magento
 *
 * NOTICE OF LICENSE
 *
 * This source file is subject to the Open Software License (OSL 3.0)
 * that is bundled with this package in the file LICENSE.txt.
 * It is also available through the world-wide-web at this URL:
 * http://opensource.org/licenses/osl-3.0.php
 * If you did not receive a copy of the license and are unable to
 * obtain it through the world-wide-web, please send an email
 * to license@magentocommerce.com so we can send you a copy immediately.
 *
 * DISCLAIMER
 *
 * Do not edit or add to this file if you wish to upgrade Magento to newer
 * versions in the future. If you wish to customize Magento for your
 * needs please refer to http://www.magentocommerce.com for more information.
 *
 * @copyright Copyright (c) 2013 X.commerce, Inc. (http://www.magentocommerce.com)
 * @license http://opensource.org/licenses/osl-3.0.php  Open Software License (OSL 3.0)
 */
class Mage_Checkout_Model_Cart_Payment_ApiTest extends PHPUnit_Framework_TestCase
{
    /**
     * Test retrieving list of available payment methods for a particular quote
     *
     * @magentoDataFixture Mage/Checkout/_files/quote.php
     */
    public function testShoppingCartPaymentList()
    {
        $paymentMethods = Magento_Test_Helper_Api::call(
            $this,
            'shoppingCartPaymentList',
            array(
                'quoteId' => $this->_getQuote()->getId(),
            )
        );

        $this->assertCount(1, $paymentMethods, 'Exactly one payment method was expected.');
        $this->assertEquals('free', $paymentMethods[0]['code'], '"free" method expected');
    }

    /**
     * Test setting payment method for the cart
     *
     * @magentoDataFixture Mage/Checkout/_files/quote_with_address_saved.php
     */
    public function testShoppingCartPaymentMethod()
    {
        $paymentMethod = array(
            'po_number' => null,
            'method' => 'checkmo',
            'cc_cid' => null,
            'cc_owner' => null,
            'cc_number' => null,
            'cc_type' => null,
            'cc_exp_year' => null,
            'cc_exp_month' => null
        );

        $result = Magento_Test_Helper_Api::call(
            $this,
            'shoppingCartPaymentMethod',
            array(
                'quoteId' => $this->_getQuote()->getId(),
                'paymentData' => (object)$paymentMethod,
            )
        );

        $this->assertTrue($result, 'Unable to set payment method');
    }

    /**
     * Returns quote generated by fixture
     *
     * @return Mage_Sales_Model_Quote
     */
    protected function _getQuote()
    {
        /** @var Mage_Sales_Model_Resource_Quote_Collection $quoteCollection */
        $quoteCollection = Mage::getModel('Mage_Sales_Model_Resource_Quote_Collection');
        /** @var $quote Mage_Sales_Model_Quote */
        $quote = $quoteCollection->getFirstItem();

        return $quote;
    }
}
